[{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"simple_parallel 0.3: Revisiting k-NN","date":"2015-10-24T00:00:00Z","uid":"0055eb9c-059c-5ec2-be1c-f4279515df92","link":"http://huonw.github.io/blog/2015/10/simple_parallel-revisiting-knn/","resume":"I recently released version 0.3 of my\n<a href=\"https://crates.io/crates/simple_parallel\"><code class=\"highlighter-rouge\">simple_parallel</code></a> crate, which builds on\n<a href=\"https://crates.io/crates/crossbeam\">Aaron Turon’s <code class=\"highlighter-rouge\">crossbeam</code></a> to resolve\n<a href=\"https://users.rust-lang.org/t/simple-parallel-now-partially-compiles-on-stable/1536\">the stability and safety difficulties</a>: the crate now works\nwith Rust 1.3.0 stable, and offers safe data-parallel <code class=\"highlighter-rouge\">for</code> loops and\n<code class=\"highlighter-rouge\">map</code>s."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Switching to Jekyll","date":"2016-11-01T16:27:00Z","uid":"033528f1-2331-59a7-abbb-2b6db3d82084","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/01/switching-to-jekyll/","resume":"If you visit the site today, you’ll notice it looks quite a bit\ndifferent.  I’ve decided to switch from my old antiquated Octopress to\na plain Jekyll-based one. The most immediate of this is that Rust code\nhighlighting looks much better, and I get access to modern\nGithub-flavored markdown. =) Since I understand plain Jekyll a bit\nmore, I’ll hopefully also be able to customize the appearance somewhat\n– but for now I’m just going with the basic theme."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Coherence, modularity, and extensibility for typeclasses","date":"2012-05-29T05:12:00Z","uid":"0370f1c9-1741-5fa0-b268-4a58cd916aa6","link":"http://pcwalton.github.com/blog/2012/05/28/coherence/","resume":"I&#8217;ve been experimenting with the design of a modification to Rust typeclasses. Because it&#8217;s always best to start with code, here&#8217;s a synopsis of what I have in mind:"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Rust 1.0 in Numbers","date":"2015-05-20T00:00:00Z","uid":"1532984f-1d89-53c7-ae66-49d04fb8c3a4","link":"http://huonw.github.io/blog/2015/05/rust-1.0-in-numbers/","resume":"<a href=\"http://blog.rust-lang.org/2015/05/15/Rust-1.0.html\">Rust 1.0</a> was\nmade with<sup id=\"fnref:methodology\"><a href=\"#fn:methodology\" class=\"footnote\">0</a></sup>…"},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"The Language Strangeness Budget","date":"2015-06-26T15:40:33Z","uid":"18b0138c-aaad-544e-a6f1-cebd276d5733","link":"http://words.steveklabnik.com/the-language-strangeness-budget","resume":"I’ve always loved programming languages. I’ve spent plenty of times with many of them, and am fortunate enough that <a href=\"http://blog.rust-lang.org/2014/12/12/Core-Team.html\" rel=\"nofollow\">language design is now part of my job</a>. In discussions about building Rust, I’ve noticed myself making a particular kind of argument often in design discussions. I like to call it ‘the language strangeness budget’."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Rust Sydney's first meetup: trip report","date":"2015-02-14T00:00:00Z","uid":"19e33369-c7de-51d6-8b0c-fbdc8f2f60cd","link":"http://huonw.github.io/blog/2015/02/rust-sydney-1/","resume":"<a href=\"http://meetup.com/Rust-Sydney\">Rust Sydney</a> had its first event last\nMonday!  The first Rust gathering I know of in Sydney, in Australia,\nor in the whole southern hemisphere."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Associated type constructors, part 1: basic concepts and introduction","date":"2016-11-02T04:00:00Z","uid":"1c52cd7a-4d23-5c61-b528-8ddf202464ae","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/","resume":"So for the end of last week, I was at Rust Belt Rust. This was\nawesome.  And not only because the speakers and attendees at Rust Belt\nRust were awesome, though they were. But also because it gave aturon,\nwithoutboats, and I a chance to talk over a lot of stuff in person. We\ncovered a lot of territory and so I wanted to do a series of blog\nposts trying to write down some of the things we were thinking so as\nto get other people’s input."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Supporting blanket impls in specialization","date":"2016-10-24T17:42:24Z","uid":"1c77f373-5bb5-51cc-9951-2c57da39310e","link":"http://smallcultfollowing.com/babysteps/blog/2016/10/24/supporting-blanket-impls-in-specialization/","resume":"In my <a href=\"/babysteps/blog/2016/09/29/distinguishing-reuse-from-override/\">previous post</a>, I talked about how we can separate out\nspecialization into two distinct concepts: <strong>reuse</strong> and <strong>override</strong>.\nDoing so makes because the conditions that make reuse possible are\nmore stringent than those that make override possible. <strong>In this post,\nI want to extend this idea to talk about a new rule for specialization\nthat allow overriding in more cases.</strong> These rules are a big enabler\nfor specialization, allowing it to accommodate many use cases that we\ncouldn’t handle before. In particular, they enable us to add blanket\nimpls like <code class=\"highlighter-rouge\">impl&lt;T: Copy&gt; Clone for T</code> in a backwards compatible\nfashion, though only under certain conditions."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"travis-cargo 0.1.3: --no-sudo","date":"2015-06-30T00:00:00Z","uid":"1d4f2491-4992-5e16-85d6-7776db333cb7","link":"http://huonw.github.io/blog/2015/06/travis-cargo-0.1.3/","resume":"I just pushed <a href=\"https://github.com/huonw/travis-cargo\">travis-cargo</a>\nversion 0.1.3, which adds a <code class=\"highlighter-rouge\">--no-sudo</code> command to\n<a href=\"/blog/2015/05/travis-on-the-train-part-2/\">the <code class=\"highlighter-rouge\">coveralls</code> and <code class=\"highlighter-rouge\">coverage</code> subcommands</a> to allow\nrecording/uploading test coverage without needing <code class=\"highlighter-rouge\">sudo</code>."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Helping Travis catch the rustc train","date":"2015-04-28T00:00:00Z","uid":"1d67ef80-2268-5b60-bed3-508d3d0f2ae6","link":"http://huonw.github.io/blog/2015/04/helping-travis-catch-the-rustc-train/","resume":"I’ve been putting off configuring my continuous integration settings\nto match the Rust train model: it involves non-trivial branching on\nthe configuration, and duplicating that over a pile of repos is not\nsomething I looked forward to. So, instead, I wrote\n<a href=\"https://github.com/huonw/travis-cargo\">travis-cargo</a> to make things\neasier."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing the First Underhanded Rust Contest","date":"2016-12-15T00:00:00Z","uid":"21e0c7c5-cdbd-5a3d-8a98-56da5bac1268","link":"http://blog.rust-lang.org/2016/12/15/Underhanded-Rust.html","resume":"The <a href=\"https://community.rs\">Rust Community Team</a> is pleased to announce the\nfirst annual Underhanded Rust Contest, inspired by the <a href=\"http://www.underhanded-c.org/\">Underhanded\nC</a> and <a href=\"https://underhandedcrypto.com/\">Underhanded\nCrypto</a> contests. Our goal with\n<a href=\"https://www.rust-lang.org/\">Rust</a> is to make it easy to write trustworthy\nlow-level software that is resistant to accidental security vulnerabilities.\nLess often challenged has been Rust’s ability to protect against\n<em>deliberate</em> vulnerabilities in the face of scrutiny. This challenge is\ndesigned to put our language and <a href=\"https://crates.io/\">the broader Rust\necosystem</a> to the test, to help us learn where our blind\nspots are and what needs to be done to address them. In short, we want you to\nbreak our stuff using reasonable, easy-to-read code. Can you write 100% safe\nRust that hides a logic bug, or hide an exploit in\n<a href=\"https://doc.rust-lang.org/book/unsafe.html\">unsafe</a> Rust that passes an audit?\nNow’s your chance!"},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"A eulogy for my 20s","date":"2016-01-24T16:27:05Z","uid":"2b00247d-59d7-5a40-82d2-b3e8dbe391a7","link":"http://words.steveklabnik.com/a-eulogy-for-my-20s","resume":"Today is the last day of my 29th year of existence. I’ve been thinking about it a lot, which is extra strange because I don’t generally care about birthdays. I’m not much of one for holidays in general. So why do I care about this one?"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Rust infrastructure can be your infrastructure","date":"2015-03-17T00:00:00Z","uid":"2d233c01-f0e8-5ece-bfd6-dfaa452e70c6","link":"http://huonw.github.io/blog/2015/03/rust-infrastructure-can-be-your-infrastructure/","resume":"<em>Update 2015-06-16</em>: Homu is now available online: <a href=\"http://homu.io/\">homu.io</a>"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"SIMD in Rust","date":"2015-08-24T00:00:00Z","uid":"2dc7352f-7b49-5d6b-98df-4c0def634956","link":"http://huonw.github.io/blog/2015/08/simd-in-rust/","resume":"A new scheme for SIMD in <a href=\"https://www.rust-lang.org/\">Rust</a> is available in the latest nightly\ncompilers, fresh off the builders (get it while it’s hot!)."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"An Overview of Memory Management in Rust","date":"2013-03-18T22:07:00Z","uid":"2f214415-f53a-5c34-812e-7db930cfb71c","link":"http://pcwalton.github.com/blog/2013/03/18/an-overview-of-memory-management-in-rust/","resume":"One of the key features of Rust that sets it apart from other new languages is that its memory management is <em>manual</em>—the programmer has explicit control over where and how memory is allocated and deallocated. In this regard, Rust is much more like C++ than like Java, Python, or Go, to name a few. This is an important design decision that makes Rust able to function in performance-critical domains that safe languages previously haven&#8217;t been able to—top-of-the line games and Web browsers, for example—but it adds a nontrivial learning curve to the language."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Memory Leaks are Memory Safe","date":"2016-04-04T00:00:00Z","uid":"3796ae21-bf6f-5df9-b391-b07d1c3b93f0","link":"http://huonw.github.io/blog/2016/04/memory-leaks-are-memory-safe/","resume":"<a href=\"https://en.wikipedia.org/wiki/Memory_safety\"><em>Memory unsafety</em></a> and <a href=\"https://en.wikipedia.org/wiki/Memory_leak\"><em>memory leaks</em></a> are arguably the two\ncategories of bugs that have received the most attention for\nprevention and mitigation. As their names suggest, they are in the\nsame part of “bug space”, however they are in some ways diametric\nopposites, and solving one does not solve the other. The widespread\nuse of memory-safe managed languages hammers this point home: they\navoid some memory unsafety by presenting a “leak everything” model to\nprogrammers."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"What does Rust's “unsafe” mean?","date":"2014-07-24T00:00:00Z","uid":"3b4cb9de-52ba-5523-b2a9-ba61ba84f52b","link":"http://huonw.github.io/blog/2014/07/what-does-rusts-unsafe-mean/","resume":"<a href=\"http://rust-lang.org/\">Rust</a> is an in-development<sup id=\"fnref:version\"><a href=\"#fn:version\" class=\"footnote\">0</a></sup> systems\nprogramming language with a strong focus on no-overhead memory\nsafety. This is achieved through a powerful type system (with\nsimilarities to Haskell), and careful tracking of ownership and\npointers, guaranteeing safety. However, this is too restrictive for a\nlow-level systems language, an escape hatch is occasionally\nrequired. Enter the <code class=\"highlighter-rouge\">unsafe</code> keyword."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"The New Borrow Check in a Nutshell","date":"2013-01-22T01:56:00Z","uid":"3f679c0a-3e7f-5664-a46e-c79a5ae116dc","link":"http://pcwalton.github.com/blog/2013/01/21/the-new-borrow-check-in-a-nutshell/","resume":"If you&#8217;ve used Rust for any period of time, you&#8217;ve probably been bitten by the mysterious <em>borrow check</em>—the compiler pass responsible for preventing <a href=\"http://stackoverflow.com/questions/6438086/iterator-invalidation-rules\">iterator invalidation</a>, as well as a few other dangling pointer scenarios. The current iteration of the borrow check enforces a fairly complex set of rules. Because the rules were hard to understand and ruled out too many valid programs, we were never really satisfied with the analysis; without a simple set of rules to follow, programmers will get frustrated and give up. To remedy this, Niko has proposed a <a href=\"http://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/\">revamp</a> of the borrow checker known as &#8220;Imagine Never Hearing the Phrase &#8216;Aliasable, Mutable&#8217; Again&#8221;. This has mostly been implemented in <a href=\"https://github.com/mozilla/rust/pull/4454\">a pull request</a> now, so I&#8217;d like to take the opportunity to explain the new rules. I&#8217;m particularly excited about this change because now the entire set of borrow check rules are simple enough to boil down to one principle."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"The Two Meanings of \"impl\"","date":"2012-12-30T18:42:00Z","uid":"41e5dd4d-f9c7-5e84-8ae8-c35353e92e78","link":"http://pcwalton.github.com/blog/2012/12/30/the-two-meanings-of-impl/","resume":"<code>impl</code> declarations in Rust have two forms. The subtle distinction between the two can be confusing at first, so I&#8217;ll briefly explain the difference here."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing Rust 1.12.1","date":"2016-10-20T00:00:00Z","uid":"4a38c7df-a784-5615-b707-4d62cb78eb62","link":"http://blog.rust-lang.org/2016/10/20/Rust-1.12.1.html","resume":"The Rust team is happy to announce the latest version of Rust, 1.12.1. Rust is a\nsystems programming language with a focus on reliability, performance, and\nconcurrency."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Revamped Parallel Layout in Servo","date":"2014-02-26T01:19:00Z","uid":"4e3bb1c4-d085-5b7e-8594-0f4efe47bca7","link":"http://pcwalton.github.com/blog/2014/02/25/revamped-parallel-layout-in-servo/","resume":"Over the past week I&#8217;ve submitted a <a href=\"https://github.com/mozilla/servo/pull/1700\">series of</a> <a href=\"https://github.com/mozilla/servo/pull/1734\">pull requests</a> that significantly revamp the way parallel layout works in Servo. Originally I did this work to improve performance, but it&#8217;s also turned out to be necessary to implement more advanced CSS 2.1 features. As it&#8217;s a fairly novel algorithm (as far as I&#8217;m aware) I&#8217;d like to take some time to explain it. I&#8217;ll start with where we are in Servo head and explain how it evolved into what&#8217;s in my branch. This post assumes a little knowledge about how browser engines work, but little else."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Removing Garbage Collection From the Rust Language","date":"2013-06-03T06:40:00Z","uid":"4f8c3bd5-149d-5a12-b174-d6899127125f","link":"http://pcwalton.github.com/blog/2013/06/02/removing-garbage-collection-from-the-rust-language/","resume":"I&#8217;ve been floating ways to simplify the memory management story in Rust around the core team lately. Memory management is a contentious topic, since we&#8217;ve worked hard to get to the current state of things, and with the push toward stability lately, there is a (quite reasonable!) resistance to any changes at this state. Still, I think the current memory management story in Rust is worth revisiting, as the current state of things may cause us problems down the line. Working with Dave Herman and Niko Matsakis, I&#8217;ve formulated a fairly concrete proposal at this point. The basic idea is to <em>remove garbage collection from the core language and relegate it to the standard library</em>, with a minimal set of language hooks in place to allow for flexible, pluggable automatic memory management."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Finding Closure in Rust","date":"2015-05-08T00:00:00Z","uid":"4fa088f4-3902-5bb3-a907-f38fcb180214","link":"http://huonw.github.io/blog/2015/05/finding-closure-in-rust/","resume":"Have you ever used an <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\">iterator adapter</a> in <a href=\"http://rust-lang.org\">Rust</a>?\nCalled a method on <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html\"><code class=\"highlighter-rouge\">Option</code></a>? <a href=\"http://doc.rust-lang.org/std/thread/fn.spawn.html\">Spawned</a> a thread?\nYou’ve almost certainly used a <a href=\"https://en.wikipedia.org/wiki/Closure_%28computer_programming%29\">closure</a>. The design in Rust may seem\na little complicated, but it slides right into Rust’s normal ownership\nmodel so let’s reinvent it from scratch."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Announcing Primal: Putting Raw Power Into Prime Numbers","date":"2015-06-08T00:00:00Z","uid":"5646a95f-75dc-5967-aa89-bf7a5a5111ee","link":"http://huonw.github.io/blog/2015/06/announcing-primal/","resume":"Over the past few weeks I’ve been working on improving my\n<code class=\"highlighter-rouge\">slow_primes</code> library, culminating in needing rename and the 0.2\nrelease of <code class=\"highlighter-rouge\">primal</code>, a Rust crate for computing properties of prime\nnumbers with <a href=\"http://primesieve.org/\">state-of-the-art algorithms</a>, while still\nmaintaining an idiomatic and easy-to-use interface."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Peeking inside Trait Objects","date":"2015-01-10T00:00:00Z","uid":"5ad4e742-b8ab-51a8-94f8-d66e7035efbd","link":"http://huonw.github.io/blog/2015/01/peeking-inside-trait-objects/","resume":"One of the most powerful parts of\n<a href=\"http://rust-lang.org\">the Rust programming language</a><sup id=\"fnref:version\"><a href=\"#fn:version\" class=\"footnote\">0</a></sup> is the\n<a href=\"http://doc.rust-lang.org/nightly/book/traits.html\">trait system</a>. They form the basis of the generic system and\npolymorphic functions and types. There’s an interesting use of traits,\nas so-called “trait objects”, that allows for dynamic polymorphism and\nheterogeneous uses of types, which I’m going to look at in more detail\nover a short series of posts."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"The 2016 Rust Conference Lineup","date":"2016-07-25T00:00:00Z","uid":"5bb3cad0-ca01-5855-91a2-13e38dcb9c7d","link":"http://blog.rust-lang.org/2016/07/25/conf-lineup.html","resume":"The Rust Community is holding three major conferences in the near future, and we\nwanted to give a shout-out to each, now that all of the lineups are fully\nannounced."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Object Safety","date":"2015-01-13T00:00:00Z","uid":"5c22adfa-a66e-586a-8661-32f51564f6d1","link":"http://huonw.github.io/blog/2015/01/object-safety/","resume":"A trait object in <a href=\"http://rust-lang.org\">Rust</a><sup id=\"fnref:version\"><a href=\"#fn:version\" class=\"footnote\">0</a></sup> can only be\nconstructed out of traits that satisfy certain restrictions, which are\ncollectively called “object safety”. This object safety can appear to\nbe a needless restriction at first, I’ll try to give a deeper\nunderstanding into why it exists and related compiler behaviour."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"crates.io crate graph","date":"2015-01-04T00:00:00Z","uid":"6758a62a-7b56-5ba1-9d4d-8ecc3bf97d26","link":"http://huonw.github.io/blog/2015/01/crates.io-crate-graph/","resume":"<a href=\"http://rust-lang.org/\">Rust</a> is a systems programming language that\ncomes with an awesome package manager <a href=\"http://doc.crates.io\">Cargo</a>,\nwhich hooks into the <a href=\"https://crates.io\">crates.io</a> registry as one of\nits possible sources of packages. The packages can have dependency\nrelationships between each other, making the database into a natural\ndirected graph."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Some notes on Send and Sync","date":"2015-02-20T00:00:00Z","uid":"6c99a766-db90-5bf7-9fde-1556f43d730f","link":"http://huonw.github.io/blog/2015/02/some-notes-on-send-and-sync/","resume":"If you’ve been in the <code class=\"highlighter-rouge\">#rust-internals</code> IRC channel recently, you\nmay’ve caught a madman raving about how much they like Rust:"},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Safe Manual Memory Management","date":"2013-05-21T03:46:00Z","uid":"7167060c-d5cd-53a1-8467-be1ff4f349fc","link":"http://pcwalton.github.com/blog/2013/05/20/safe-manual-memory-management/","resume":"If there&#8217;s one feature of Rust that is probably the most unique among languages in industry, it&#8217;s <em>safe manual memory management</em>."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Announcing intorust.com","date":"2016-09-30T19:48:54Z","uid":"7245a2a0-962b-5ea6-9b1a-12b69f4d2c91","link":"http://smallcultfollowing.com/babysteps/blog/2016/09/30/announcing-intorust-dot-com/","resume":"For the past year or so, I and a few others have been iterating on\nsome tutorial slides for learning Rust. I’ve given this tutorial here\nat the local <a href=\"http://www.meetup.com/BostonRust/\">Boston Rust Meetup</a> a few times, and we used the same\nbasic approach at RustConf; I’ve been pretty happy with the\nresults. But until now it’s been limited to “in person” events."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Parallel iterators, part 3: Consumers","date":"2016-11-14T05:00:00Z","uid":"741a4f46-9b2d-5eeb-b40d-0fb29d7b11e4","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/14/parallel-iterators-part-3-consumers/","resume":"This post is the (long awaited, or at least long promised) third post\nin my series on Rayon’s parallel iterators. The previous two posts\nwere some time ago, but I’ve been feeling inspired to push more on\nRayon lately, and I remembered that I had never finished this blog\npost series."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Associated type constructors, part 3: What higher-kinded types might look like","date":"2016-11-04T04:00:00Z","uid":"75e43d9c-397a-5bba-808f-498e183cb14c","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/","resume":"This post is a continuation of my posts discussing the topic of\nassociated type constructors (ATC) and higher-kinded types (HKT):"},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Shape of errors to come","date":"2016-08-10T00:00:00Z","uid":"7c1b9c4c-954a-5231-a2d7-4d0e596c9534","link":"http://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html","resume":"There are changes afoot in the Rust world. If you’ve tried out the latest nightly, you’ll notice\nsomething is <em>a little different</em>. For the past few months we’ve been working on new way of\nreporting errors that’s easier to read and understand. This is part of an on-going campaign to\nimprove Rust’s usability across the board. We mentioned ways to help us\n<a href=\"http://www.jonathanturner.org/2016/08/helping-out-with-rust-errors.html\">make the transition</a>\nto the new errors, and already many people have jumped in (and thank you to those volunteers!)"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Myths and Legends about Integer Overflow in Rust","date":"2016-04-29T00:00:00Z","uid":"80b46bf1-db10-59af-93ca-c07bec651616","link":"http://huonw.github.io/blog/2016/04/myths-and-legends-about-integer-overflow-in-rust/","resume":"The primitive integer types supported by CPUs are finite\napproximations to the infinite set of integers we’re all used to. This\napproximation breaks down and some computations will give results that\ndon’t match real integers, like <code class=\"highlighter-rouge\">255_u8 + 1 == 0</code>. Often, this\nmismatch is something the programmer didn’t think about, and thus can\neasily result in bugs."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Comparing k-NN in Rust","date":"2014-06-10T00:00:00Z","uid":"81929e98-2ab8-59e0-9116-6f02f4cdaba9","link":"http://huonw.github.io/blog/2014/06/comparing-knn-in-rust/","resume":"In my voyages around the internet, I came across <a href=\"http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-learning-algorithm-implemented-in-f-number-and-ocaml/\">a pair</a> of\n<a href=\"http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins/\">blog posts</a> which compare the implementation of a\n<em>k</em>-nearest neighbour (<em>k</em>-NN) classifier in F# and OCaml. I couldn’t\nresist writing the code into <a href=\"http://rust-lang.org/\">Rust</a> to see how it fared."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Travis on the train, part 2","date":"2015-05-01T00:00:00Z","uid":"81b16c13-18b4-538b-a741-7faba04c4a54","link":"http://huonw.github.io/blog/2015/05/travis-on-the-train-part-2/","resume":"After announcing <a href=\"https://github.com/huonw/travis-cargo\">travis-cargo</a> a few days ago in\n<a href=\"/blog/2015/04/helping-travis-catch-the-rustc-train/\"><em>Helping Travis catch the rustc train</em></a>, I got some\ngreat hints/contributions from <a href=\"https://github.com/jansegre\">Jan Segre</a> and had a fun little\ntime automating <a href=\"https://users.rust-lang.org/t/tutorial-how-to-collect-test-coverages-for-rust-project/650/2?u=huon\">code coverage collection</a> via\n<a href=\"http://coveralls.io\">coveralls.io</a>. Unfortunately, <strong>this is a breaking\nchange</strong> for existing users of travis-cargo, but the migration is\neasy."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"A Hard Case for Memory Safety","date":"2013-04-12T21:01:00Z","uid":"82fc50e0-d32a-5c30-ad3d-2b2a4f5bd92f","link":"http://pcwalton.github.com/blog/2013/04/12/a-hard-case-for-memory-safety/","resume":"Quick quiz: In this C++ program, is the definition of <code>munge</code> guaranteed to be memory safe? (Assume that the definition of <code>increment_counter</code> uses only modern C++ idioms and doesn&#8217;t do anything like dereference an invalid pointer.)"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Little libraries","date":"2015-04-27T00:00:00Z","uid":"8539fd45-4f0e-5f8f-ad44-971e9b7debfa","link":"http://huonw.github.io/blog/2015/04/little-libraries/","resume":"I’ve been having a lot of fun recently solving “little” problems in\nRust. I have a long term project to make something for displaying my\n(GPS-tagged) photos nicely and, along the way, I’ve discovered and\nfilled in a few gaps by creating focused crates for small tasks."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Drawing CSS Box Shadows in WebRender","date":"2015-12-21T19:08:00Z","uid":"867201c1-96f8-5343-8139-fdf4fdf6e80e","link":"http://pcwalton.github.com/blog/2015/12/21/drawing-css-box-shadows-in-webrender/","resume":"I recently landed a <a href=\"https://github.com/glennw/webrender/commit/d57057470cb2bddf0c8ece3fc29cfbe5d03114a2\">change</a> in WebRender to draw <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\">CSS box shadows</a> using a specialized shader. Because it&#8217;s an unusual approach to drawing shadows, I thought I&#8217;d write up how it works."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"Ouroboros","date":"2015-05-18T18:16:17Z","uid":"894db24d-eeba-5bcd-b013-eb842e4edc52","link":"http://words.steveklabnik.com/ouroboros","resume":"One of the things that I love about open source is its ability to send improvements across projects. Sometimes, an improvement in one project ends up improving its upstream. This kind of network effect really gets to the core of it for me: steady, constant improvement."},{"info":{"id":"RustWeek","name":"This week in Rust","feedurl":"https://this-week-in-rust.org/rss.xml","homepage":"https://this-week-in-rust.org"},"title":"This Week in Rust 159","date":"2016-12-06T05:00:00Z","uid":"8b3e8748-be84-59ce-94ac-e52b47d77d76","link":"https://this-week-in-rust.org/blog/2016/12/06/this-week-in-rust-159/","resume":"Hello and welcome to another issue of <em>This Week in Rust</em>!\n<a href=\"http://rust-lang.org\">Rust</a> is a systems language pursuing the trifecta: safety, concurrency, and speed.\nThis is a weekly summary of its progress and community.\nWant something mentioned? Tweet us at <a href=\"https://twitter.com/ThisWeekInRust\">@ThisWeekInRust</a> or <a href=\"https://github.com/cmr/this-week-in-rust\">send us a pull request</a>.\nWant to get involved? <a href=\"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\">We love contributions</a>."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Typestate Is Dead, Long Live Typestate!","date":"2012-12-27T03:54:00Z","uid":"9000dc16-ef5d-5ef0-a73a-8dedf7accc71","link":"http://pcwalton.github.com/blog/2012/12/26/typestate-is-dead/","resume":"One well-known fact about Rust is that the typestate system, which was one of the most unique aspects of the language early on, was dropped in Rust 0.4. The reason was that &#8220;in practice, it found little use&#8221; (courtesy of Wikipedia), which is fairly accurate. However, what&#8217;s less well known is that, in the meantime, Rust gained the building blocks necessary for typestate via its uniqueness typing system. With the right patterns, most of the safety guarantees that typestate enabled can be achieved, although it&#8217;s not as easy to use."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"State of Rust Survey 2016","date":"2016-06-30T00:00:00Z","uid":"90adfb08-5917-5adb-93e7-c763ed5cb73d","link":"http://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html","resume":"We recently wrapped up with a survey for the Rust community.  Little did we know that it would grow to be one of the largest language community surveys.  A <em>huge</em> thank you to the <strong>3,086</strong> people who responded!  We’re humbled by the response, and we’re thankful for all the great feedback."},{"info":{"id":"RustWeek","name":"This week in Rust","feedurl":"https://this-week-in-rust.org/rss.xml","homepage":"https://this-week-in-rust.org"},"title":"This Week in Rust 161","date":"2016-12-20T05:00:00Z","uid":"99571943-be5f-591c-9e19-edc5eaf0938f","link":"https://this-week-in-rust.org/blog/2016/12/20/this-week-in-rust-161/","resume":"Hello and welcome to another issue of <em>This Week in Rust</em>!\n<a href=\"http://rust-lang.org\">Rust</a> is a systems language pursuing the trifecta: safety, concurrency, and speed.\nThis is a weekly summary of its progress and community.\nWant something mentioned? Tweet us at <a href=\"https://twitter.com/ThisWeekInRust\">@ThisWeekInRust</a> or <a href=\"https://github.com/cmr/this-week-in-rust\">send us a pull request</a>.\nWant to get involved? <a href=\"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\">We love contributions</a>."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"A Tour of Vector Representations","date":"2012-12-29T02:43:00Z","uid":"99c260ac-e3a9-5055-9808-050f54190a7e","link":"http://pcwalton.github.com/blog/2012/12/28/a-tour-of-vectors/","resume":"One aspect of Rust that&#8217;s often confusing to newcomers is its treatment of strings and vectors (also known as arrays or lists). As a result of its focus on systems programming, Rust has a somewhat lower-level concept of a vector than most other languages do. As part of an overall goal to make Rust easy to understand, I thought I&#8217;d write up a quick tour of the way other languages&#8217; vectors work from the perspective of the machine in order to make it easier to map these concepts into Rust."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Defaulting to Thread-Safety: Closures and Concurrency","date":"2015-05-26T00:00:00Z","uid":"9e11aa01-0274-5283-a56f-7de544170292","link":"http://huonw.github.io/blog/2015/05/defaulting-to-thread-safety/","resume":"Rust has some powerful tricks to model properties of aggregate types\nvia unsafe traits with default and negative implementations. These\nfeatures motivated by offering flexible concurrency/parallelism, and\nallow powerful closure-based APIs without losing any thread-safety (or\nmemory-safety) guarantees at all."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Incremental Compilation","date":"2016-09-08T00:00:00Z","uid":"9e28c7fd-799c-55c6-8b98-dacaf2da8f1e","link":"http://blog.rust-lang.org/2016/09/08/incremental.html","resume":"I remember when, during the 1.0 anniversary presentation at the\n<a href=\"https://air.mozilla.org/bay-area-rust-meetup-may-2016/\">Bay Area Meetup</a>, Aaron Turon talked about Dropbox so far having been\npretty happy with using Rust in production there. <em>The core\nteam has been in touch with them regularly</em>, he said, <em>asking them, you know,\nwhat do you need? And their answer is always: faster compiles …</em> To the\nseasoned Rust user it is no surprise that this solicited a knowing chuckle from\nthe audience. Improving compile times has actually been a major development\nfocus after Rust reached 1.0 – although, up to this point, much of the work\ntowards this goal has gone into laying <a href=\"https://blog.rust-lang.org/2016/04/19/MIR.html\">architectural foundations</a> within\nthe compiler and we are only slowly beginning to see actual results."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"A Gentle Introduction to Traits in Rust","date":"2012-08-08T17:46:00Z","uid":"9e872d02-ddc1-5476-af11-538c164387bc","link":"http://pcwalton.github.com/blog/2012/08/08/a-gentle-introduction-to-traits-in-rust/","resume":"Rust traits pack a lot of flexibility into a simple system, and they&#8217;re one of my favorite features of the language. But as a result of the rapid pace of the language&#8217;s development, there&#8217;s been a fair amount of confusion as to how they work. As such, I figured I&#8217;d write up a quick tutorial explaining why and how to use them."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"The Sized Trait","date":"2015-01-12T00:00:00Z","uid":"a37aa744-2a64-596c-8167-ddd127f6be6b","link":"http://huonw.github.io/blog/2015/01/the-sized-trait/","resume":"An important piece in my story about trait objects in\n<a href=\"http://rust-lang.org\">Rust</a><sup id=\"fnref:version\"><a href=\"#fn:version\" class=\"footnote\">0</a></sup> is <a href=\"https://doc.rust-lang.org/nightly/std/marker/trait.Sized.html\">the <code class=\"highlighter-rouge\">Sized</code> trait</a>,\nso I’m slotting in this short post between\n<a href=\"/blog/2015/01/peeking-inside-trait-objects/\">my discussion of low-level details</a> and\n<a href=\"/blog/2015/01/object-safety/\">the post on “object safety”</a>."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"Four years with Rust","date":"2016-12-21T14:45:02Z","uid":"aa58fea4-b6af-5fe9-b828-2eedc0b136d0","link":"http://words.steveklabnik.com/four-years-with-rust","resume":"Today is four years since I first learned about the existence of Rust. I know this because Rust 0.5 was the first release I used. Rust has changed a lot in that time. For a brief overview of its history, <a href=\"https://www.youtube.com/watch?v=79PSagCD_AY\" rel=\"nofollow\">watch this talk of mine</a>. But for today, I thought it would be fun to check out <a href=\"https://mail.mozilla.org/pipermail/rust-dev/2012-December/002787.html\" rel=\"nofollow\">the release announcement</a> and see what’s the same, and what’s changed."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing Rust 1.10","date":"2016-07-07T00:00:00Z","uid":"aaa45a27-b0f1-57e9-b046-03c89b7095dd","link":"http://blog.rust-lang.org/2016/07/07/Rust-1.10.html","resume":"The Rust team is happy to announce the latest version of Rust, 1.10. Rust is a\nsystems programming language focused on safety, speed, and concurrency."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing Rust 1.12","date":"2016-09-29T00:00:00Z","uid":"b4780449-588d-5cd9-8a97-93177a6f8c66","link":"http://blog.rust-lang.org/2016/09/29/Rust-1.12.html","resume":"The Rust team is happy to announce the latest version of Rust, 1.12. Rust is\na systems programming language with the slogan “fast, reliable, productive:\npick three.”"},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"DOCember: documentation + December","date":"2015-12-01T15:32:16Z","uid":"b5e9f684-98b3-575f-9e0f-57c0cd74bf83","link":"http://words.steveklabnik.com/docember","resume":"There are few things I appreciate more than using software projects that have good documentation. When I’m new to the project, documentation is invaluable for helping me get going. When I’m not new, good documentation helps me get the information I need to :shipit:."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Distinguishing reuse from override","date":"2016-09-29T10:02:19Z","uid":"b612141b-a707-5a10-ad39-b5f6f1f69f9d","link":"http://smallcultfollowing.com/babysteps/blog/2016/09/29/distinguishing-reuse-from-override/","resume":"In my <a href=\"/babysteps/blog/2016/09/24/intersection-impls/\">previous post</a>, I started discussing the idea of\nintersection impls, which are a possible extension to\n<a href=\"https://github.com/rust-lang/rfcs/pull/1210\">specialization</a>. I am specifically looking at the idea of\nmaking it possible to add blanket impls to (e.g.) implement <code class=\"highlighter-rouge\">Clone</code>\nfor any <code class=\"highlighter-rouge\">Copy</code> type. We saw that intersection impls, while useful, do\nnot enable us to do this in a backwards compatible way."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Associated type constructors, part 2: family traits","date":"2016-11-03T04:00:00Z","uid":"b68518a1-35ba-5eef-b153-f8dd73824e31","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/","resume":"Hello. This post is a continuation of my posts discussing the topic of\nassociated type constructors (ATC) and higher-kinded types (HKT):"},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Why Lifetimes?","date":"2012-04-24T06:19:00Z","uid":"b9a70c7c-23a9-55e6-be65-271c5067245e","link":"http://pcwalton.github.com/blog/2012/04/23/why-lifetimes/","resume":"One of the most unique new features of Rust is its slowly-growing support for <em>regions</em>&mdash;or <em>lifetimes</em>, as some of us core developers like to call them. As lifetimes aren&#8217;t found in any mainstream languages, I thought I&#8217;d expand upon why we want them and how they can be used to improve memory management for performance (especially interactive performance) without sacrificing safety. In this first post I&#8217;ll explain why existing memory models weren&#8217;t enough and why we went searching for alternatives. Here I&#8217;m assuming basic knowledge of garbage collection, reference counting, and <code>malloc</code>/<code>free</code>, but nothing more."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Rreverrse Debugging","date":"2015-10-27T00:00:00Z","uid":"bb7cf59b-570b-5ad5-bcac-456c1d5aa3dd","link":"http://huonw.github.io/blog/2015/10/rreverse-debugging/","resume":"Imagine being able to step forward and <em>backwards</em> as code runs in\nyour debugger. Imagine being able to do an test run multiple times\nwith exactly the same sequence of instructions and values, right down\nto memory addresses and IO. Imagine being able to run an executable\nthousands of times and then do all that in the one execution that\ntriggers the rare bug that’s draining you of life…"},{"info":{"id":"RustWeek","name":"This week in Rust","feedurl":"https://this-week-in-rust.org/rss.xml","homepage":"https://this-week-in-rust.org"},"title":"This Week in Rust 160","date":"2016-12-13T05:00:00Z","uid":"bc548f95-a98f-558a-8f70-98835b150772","link":"https://this-week-in-rust.org/blog/2016/12/13/this-week-in-rust-160/","resume":"Hello and welcome to another issue of <em>This Week in Rust</em>!\n<a href=\"http://rust-lang.org\">Rust</a> is a systems language pursuing the trifecta: safety, concurrency, and speed.\nThis is a weekly summary of its progress and community.\nWant something mentioned? Tweet us at <a href=\"https://twitter.com/ThisWeekInRust\">@ThisWeekInRust</a> or <a href=\"https://github.com/cmr/this-week-in-rust\">send us a pull request</a>.\nWant to get involved? <a href=\"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\">We love contributions</a>."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"What is SIMD?","date":"2015-07-10T00:00:00Z","uid":"c2d3c18a-025e-599d-a9d4-05e57be07c5e","link":"http://huonw.github.io/blog/2015/07/what-is-simd/","resume":"I’m currently in San Francisco doing an internship at Mozilla\nResearch, working on creating functionality for SIMD in the Rust\nprogramming language."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"Rescuing Resque... again.","date":"2015-10-28T17:04:36Z","uid":"c435d9e5-b99a-5ce1-b6bb-914086de4fac","link":"http://words.steveklabnik.com/rescuing-resque-again","resume":"A long time ago, there was a big open source project, which was a huge part of the Rails world, but had almost no maintenance. This project was Resque, the go-to way to write background jobs for your Rails application. I attended a talk where the current maintainer was clearly getting burned out, and so, <a href=\"http://blog.steveklabnik.com/posts/2012-09-22-resque--let-s-do-this\" rel=\"nofollow\">offered to help</a>. The problem is, things have changed."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Unique Pointers Aren't Just About Memory Management","date":"2012-10-03T18:32:00Z","uid":"c793ba7e-52dc-56a1-a0f0-757a006cb3fd","link":"http://pcwalton.github.com/blog/2012/10/03/unique-pointers-arent-just-about-memory-management/","resume":"One of the most unusual features of Rust, especially when compared to languages that aren&#8217;t C++, is the three types of pointers: <em>borrowed</em> pointers (<code>&amp;T</code>), <em>unique</em> pointers (<code>~T</code>), and <em>managed</em> pointers (<code>@T</code>). Most people quite rightly ask &#8220;why three pointers? Isn&#8217;t one enough?&#8221; The usual answer is that unique pointers help with manual memory management:"},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"Community Versions for Rust","date":"2015-08-23T22:06:35Z","uid":"c80ea881-5d0e-5760-9c30-13fa22a5474c","link":"http://words.steveklabnik.com/community-versions-for-rust","resume":"<a href=\"http://www.rust-lang.org\" rel=\"nofollow\">Rust</a> has been through a lot of changes in recent years. As such, tutorials get out of date. We’ve occasionally said that including <code class=\"prettyprint\">rustc -v</code> in your blog posts would be helpful, but today, I saw this tweet go by:"},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing Rust 1.13","date":"2016-11-10T00:00:00Z","uid":"cb0c3f33-7633-515b-a96f-a82e4802aee9","link":"http://blog.rust-lang.org/2016/11/10/Rust-1.13.html","resume":"The Rust team is happy to announce the latest version of Rust, 1.13.0. Rust is\na systems programming language focused on safety, speed, and concurrency."},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Error handling in Rust: a k-NN case study","date":"2014-06-11T00:00:00Z","uid":"d0baa010-5d25-54a0-993b-efd59c04f006","link":"http://huonw.github.io/blog/2014/06/error-handling-in-rust-knn-case-study/","resume":"After posting\n<a href=\"/blog/2014/06/comparing-knn-in-rust/\">a Rust translation of some <em>k</em>-nearest neighbour code</a>,\nI got a <a href=\"https://news.ycombinator.com/item?id=7875378\">few</a>\n<a href=\"https://news.ycombinator.com/item?id=7872878\">comments</a> asking “how\nwould you handle errors if you wanted to?”. This is the perfect chance\nto briefly demonstrate a few idioms."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Which Pointer Should I Use?","date":"2013-03-09T20:05:00Z","uid":"d332148b-c9cf-59ff-958a-70fa8d3fc51b","link":"http://pcwalton.github.com/blog/2013/03/09/which-pointer-should-i-use/","resume":"Deciding whether to use a managed <code>@</code> pointer or an owned <code>~</code> pointer to allocate memory is one of the most frequent sources of confusion for newcomers to Rust. There are two main angles to consider when deciding whether to use an <code>@</code> pointer or a <code>~</code> pointer in Rust: <em>memory management</em> and <em>concurrency</em>. I&#8217;ll cover each in turn."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Observational equivalence and unsafe code","date":"2016-10-02T11:06:23Z","uid":"d501a4c5-48d6-5112-89a9-770635471b10","link":"http://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/","resume":"I spent a really interesting day last week at Northeastern University.\nFirst, I saw a fun talk by Philip Haller covering <a href=\"http://2016.splashcon.org/event/splash-2016-oopsla-lacasa-lightweight-affinity-and-object-capabilities-in-scala\">LaCasa</a>, which is a\nset of extensions to Scala that enable it to track ownership. Many of\nthe techniques reminded me very much of Rust (e.g., the use of\n“spores”, which are closures that can limit the types of things they\nclose over); if I have time, I’ll try to write up a more detailed\ncomparison in some later post."},{"info":{"id":"NikoMatsakis","name":"Niko Matsakis","feedurl":"http://smallcultfollowing.com/babysteps/atom.xml","homepage":"http://smallcultfollowing.com/babysteps/"},"title":"Associated type constructors, part 4: Unifying ATC and HKT","date":"2016-11-09T05:00:00Z","uid":"d8380180-27ce-582e-bac8-a9f7bc2c4f50","link":"http://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/","resume":"This post is a continuation of my posts discussing the topic of\nassociated type constructors (ATC) and higher-kinded types (HKT):"},{"info":{"id":"HuonWilson","name":"Huon Wilson","feedurl":"http://huonw.github.io/blog/rss.xml","homepage":"http://huonw.github.io"},"title":"Where Self Meets Sized: Revisiting Object Safety","date":"2015-05-06T00:00:00Z","uid":"d86d044e-6f37-5ef9-9204-9d4b5c6d41cf","link":"http://huonw.github.io/blog/2015/05/where-self-meets-sized-revisiting-object-safety/","resume":"The concept of object safety in Rust was recently refined to be more\nflexible in an important way: the checks can be disabled for specific\nmethods by using <code class=\"highlighter-rouge\">where</code> clauses to restrict them to only work when\n<code class=\"highlighter-rouge\">Self: Sized</code>."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Maximally Minimal Classes for Rust","date":"2012-06-03T21:35:00Z","uid":"dc5eb0ac-5a32-5fc7-ae5f-546de2d55d38","link":"http://pcwalton.github.com/blog/2012/06/03/maximally-minimal-classes-for-rust/","resume":"Now that classes have been implemented as per the original proposal, the other Rusters and I have been starting to get a feel for the way they work out in practice. The results are positive, but not optimal. Although they definitely succeeded in avoiding the rigidity of traditional object-oriented languages like Java, they still have two basic problems: (1) they feel somewhat out of place with the rest of the language; and (2) they&#8217;re still too heavyweight. Nevertheless, the functionality that they enabled is important, and we shouldn&#8217;t sacrifice it."},{"info":{"id":"PatrickWalton","name":"Patrick Walton","feedurl":"http://pcwalton.github.io/atom.xml","homepage":"http://pcwalton.github.io"},"title":"Performance of Sequential Rust Programs","date":"2013-04-18T23:09:00Z","uid":"df4b44ff-6b52-522b-90ea-2d4f8e091ce2","link":"http://pcwalton.github.com/blog/2013/04/18/performance-of-sequential-rust-programs/","resume":"Although Rust is designed for parallel programs, it is important that the performance of single-threaded, sequential programs not suffer in its design. As far as Servo is concerned, sequential performance is still important in many domains that a Web browser engine must compete in."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"What's new with \"The Rust Programming Language\"?","date":"2016-08-15T16:04:44Z","uid":"dfd5e4cf-c96f-5407-bfc5-f1f1d02128f1","link":"http://words.steveklabnik.com/whats-new-with-the-rust-programming-language","resume":"It’s been a while since I’ve mentioned my work on “The Rust Programming Language”, and I wanted to give you all an update. Before we get into the news, though, I’d like to take a moment to reflect on where the book has been, and then we’ll talk about it’s future."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"Structure literals vs constructors in Rust","date":"2016-07-26T18:37:12Z","uid":"e1581ef9-8af7-54a3-8cbd-e91227954ba9","link":"http://words.steveklabnik.com/structure-literals-vs-constructors-in-rust","resume":"Learning the basics of a language and its syntax is easy. Learning how all those bits fit together is a bit harder. There’s a neat intersection between three of Rust’s features that I’ve seen people use, but never seen written down. I was explaining this technique to someone in <code class=\"prettyprint\">#rust-beginners</code> the other day, and thought I’d write it down in case it helps you, too."},{"info":{"id":"RustLang","name":"The Rust Programming Language Blog","feedurl":"https://blog.rust-lang.org/feed.xml","homepage":"https://blog.rust-lang.org"},"title":"Announcing Rust 1.11","date":"2016-08-18T00:00:00Z","uid":"e298fd5b-6702-5e90-909b-3c7bca9bba55","link":"http://blog.rust-lang.org/2016/08/18/Rust-1.11.html","resume":"The Rust team is happy to announce the latest version of Rust, 1.11. Rust is a\nsystems programming language focused on safety, speed, and concurrency."},{"info":{"id":"SteveKlabnik","name":"Steve Klabnik","feedurl":"http://feeds.feedburner.com/steveklabnik/words","homepage":"http://words.steveklabnik.com"},"title":"\"The Rust Programming Language\" will be published by No Starch Press","date":"2015-09-08T19:08:41Z","uid":"f45329c3-6161-54b5-86f8-0824807cc678","link":"http://words.steveklabnik.com/the-rust-programming-language-will-be-published-by-no-starch-press","resume":"I’m happy to bring you some news: <a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"nofollow\">“The Rust Programming Language”</a> is going to be published, in physical form, by <a href=\"https://www.nostarch.com/\" rel=\"nofollow\">No Starch Press</a>. I am really excited to work with No Starch on this: they’ve published some of my favorite programming books, like <a href=\"https://www.nostarch.com/hemingway\" rel=\"nofollow\">“If Hemingway Wrote JavaScript”</a>, <a href=\"https://www.nostarch.com/rum\" rel=\"nofollow\">“Ruby Under a Microscope”</a>, and <a href=\"https://www.nostarch.com/rubywizardry\" rel=\"nofollow\">“Ruby Wizardry”</a>."},{"info":{"id":"RustWeek","name":"This week in Rust","feedurl":"https://this-week-in-rust.org/rss.xml","homepage":"https://this-week-in-rust.org"},"title":"This Week in Rust 158","date":"2016-11-29T05:00:00Z","uid":"fc772536-3832-57db-a707-1279321745ec","link":"https://this-week-in-rust.org/blog/2016/11/29/this-week-in-rust-158/","resume":"Hello and welcome to another issue of <em>This Week in Rust</em>!\n<a href=\"http://rust-lang.org\">Rust</a> is a systems language pursuing the trifecta: safety, concurrency, and speed.\nThis is a weekly summary of its progress and community.\nWant something mentioned? Tweet us at <a href=\"https://twitter.com/ThisWeekInRust\">@ThisWeekInRust</a> or <a href=\"https://github.com/cmr/this-week-in-rust\">send us a pull request</a>.\nWant to get involved? <a href=\"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\">We love contributions</a>."}]